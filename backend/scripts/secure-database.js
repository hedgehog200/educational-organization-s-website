#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞ Windows, —Ç–∞–∫ –∏ –Ω–∞ Unix/Linux
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node secure-database.js           - –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
 *   node secure-database.js --watch   - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
 *   node secure-database.js --interval=5 - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function secureDatabase() {
  log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', colors.cyan + colors.bright);
  log('   –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î', colors.cyan + colors.bright);
  log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', colors.cyan + colors.bright);

  const dbPath = path.join(__dirname, '../database/college.db');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  if (!fs.existsSync(dbPath)) {
    log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', colors.red);
    log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è: ${dbPath}`, colors.red);
    log('\n–°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.', colors.yellow);
    process.exit(1);
  }

  log(`üìÅ –ù–∞–π–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`, colors.cyan);

  try {
    if (process.platform === 'win32') {
      // Windows: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ACL
      log('\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Windows...', colors.cyan);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const username = process.env.USERNAME || process.env.USER;
        
        log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`, colors.cyan);
        log('   –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...', colors.cyan);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞
        log('\nüìã –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:', colors.yellow);
        try {
          const currentPerms = execSync(`icacls "${dbPath}"`, { encoding: 'utf8' });
          console.log(currentPerms);
        } catch (e) {
          log('   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞', colors.yellow);
        }
        
        log('\n‚úÖ –í Windows —Ñ–∞–π–ª —É–∂–µ –∑–∞—â–∏—â–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', colors.green);
        log('   –î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ:', colors.green);
        log('   - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', colors.green);
        log('   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã', colors.green);
        log('   - –°–∏—Å—Ç–µ–º–∞', colors.green);
        
      } catch (error) {
        log(`\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${error.message}`, colors.yellow);
        log('   –í Windows –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π ACL', colors.yellow);
      }
      
    } else {
      // Unix/Linux: –ò—Å–ø–æ–ª—å–∑—É–µ–º chmod
      log('\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Unix/Linux...', colors.cyan);
      
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ 600 (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å)
        fs.chmodSync(dbPath, 0o600);
        
        const stats = fs.statSync(dbPath);
        const mode = (stats.mode & parseInt('777', 8)).toString(8);
        
        log(`\n‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${mode}`, colors.green);
        log('   –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª', colors.green);
        
      } catch (error) {
        log(`\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤: ${error.message}`, colors.red);
        log('   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é: chmod 600 backend/database/college.db', colors.yellow);
        process.exit(1);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
    log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞...', colors.cyan);
    try {
      fs.accessSync(dbPath, fs.constants.R_OK | fs.constants.W_OK);
      log('‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏', colors.green);
    } catch (error) {
      log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª—É!', colors.red);
      process.exit(1);
    }
    
    log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', colors.green + colors.bright);
    log('   ‚ú® –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', colors.green + colors.bright);
    log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', colors.green + colors.bright);
    
  } catch (error) {
    log(`\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    process.exit(1);
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: .gitignore
function checkGitignore() {
  log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...', colors.cyan);
  
  const gitignorePath = path.join(__dirname, '../../.gitignore');
  
  if (!fs.existsSync(gitignorePath)) {
    log('‚ö†Ô∏è  .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω', colors.yellow);
    return;
  }
  
  const content = fs.readFileSync(gitignorePath, 'utf8');
  const hasDb = content.includes('*.db') || content.includes('.db');
  
  if (!hasDb) {
    log('‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ .gitignore!', colors.yellow);
    log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å: *.db', colors.yellow);
  } else {
    log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—â–∏—â–µ–Ω–∞ –≤ .gitignore', colors.green);
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function checkDatabaseIntegrity() {
  const dbPath = path.join(__dirname, '../database/college.db');
  
  if (!fs.existsSync(dbPath)) {
    log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', colors.red);
    return false;
  }
  
  try {
    const stats = fs.statSync(dbPath);
    const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
    
    log(`üìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${sizeInMB} MB`, colors.cyan);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–ø—É—Å—Ç–∞—è –ë–î –æ–±—ã—á–Ω–æ > 0)
    if (stats.size < 100) {
      log('‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞!', colors.yellow);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const lastModified = new Date(stats.mtime);
    const now = new Date();
    const daysSinceModified = Math.floor((now - lastModified) / (1000 * 60 * 60 * 24));
    
    if (daysSinceModified > 30) {
      log(`‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–∑–º–µ–Ω—è–ª–∞—Å—å ${daysSinceModified} –¥–Ω–µ–π`, colors.yellow);
    } else {
      log(`‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${lastModified.toLocaleString('ru-RU')}`, colors.green);
    }
    
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: ${error.message}`, colors.red);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function startMonitoring(intervalMinutes = 10) {
  log('\nüîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', colors.cyan + colors.bright);
  log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${intervalMinutes} –º–∏–Ω—É—Ç`, colors.cyan);
  log('   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n', colors.yellow);
  
  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
  runSecurityCheck();
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  const intervalMs = intervalMinutes * 60 * 1000;
  setInterval(() => {
    log(`\n${'='.repeat(50)}`, colors.cyan);
    log(`üîÑ –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString('ru-RU')}`, colors.cyan);
    log('='.repeat(50), colors.cyan);
    runSecurityCheck();
  }, intervalMs);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    log('\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', colors.yellow);
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    log('\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', colors.yellow);
    process.exit(0);
  });
}

// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function runSecurityCheck() {
  try {
    secureDatabase();
    checkGitignore();
    checkDatabaseIntegrity();
    
    log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', colors.cyan);
    log('   1. –†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', colors.cyan);
    log('   2. –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ git', colors.cyan);
    log('   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', colors.cyan);
    log('   4. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ: node scripts/security-check.js\n', colors.cyan);
    
    return true;
  } catch (error) {
    log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${error.message}`, colors.red);
    return false;
  }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
  const args = process.argv.slice(2);
  const options = {
    watch: false,
    interval: 10 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç
  };
  
  args.forEach(arg => {
    if (arg === '--watch' || arg === '-w') {
      options.watch = true;
    } else if (arg.startsWith('--interval=')) {
      const interval = parseInt(arg.split('=')[1]);
      if (!isNaN(interval) && interval > 0) {
        options.interval = interval;
      }
    } else if (arg === '--help' || arg === '-h') {
      printHelp();
      process.exit(0);
    }
  });
  
  return options;
}

// –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
function printHelp() {
  log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', colors.cyan + colors.bright);
  log('   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', colors.cyan + colors.bright);
  log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', colors.cyan + colors.bright);
  
  log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:', colors.cyan);
  log('  node secure-database.js [–æ–ø—Ü–∏–∏]\n', colors.green);
  
  log('–û–ø—Ü–∏–∏:', colors.cyan);
  log('  --watch, -w              –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', colors.green);
  log('  --interval=N             –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)', colors.green);
  log('  --help, -h               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n', colors.green);
  
  log('–ü—Ä–∏–º–µ—Ä—ã:', colors.cyan);
  log('  node secure-database.js', colors.green);
  log('  node secure-database.js --watch', colors.green);
  log('  node secure-database.js --watch --interval=5', colors.green);
  log('  node secure-database.js --interval=15\n', colors.green);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const options = parseArgs();
  
  if (options.watch) {
    // –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    startMonitoring(options.interval);
  } else {
    // –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    runSecurityCheck();
  }
}

// –ó–∞–ø—É—Å–∫
main();

