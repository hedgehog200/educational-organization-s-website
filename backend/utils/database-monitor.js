/**
 * –ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ë–î
 */

const fs = require('fs');
const path = require('path');

class DatabaseMonitor {
  constructor(options = {}) {
    this.dbPath = options.dbPath || path.join(__dirname, '../database/college.db');
    this.intervalMinutes = options.intervalMinutes || 30; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç
    this.enabled = options.enabled !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω
    this.intervalId = null;
    this.lastCheckTime = null;
    this.checkCount = 0;
    this.logger = options.logger || console;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  start() {
    if (!this.enabled) {
      this.logger.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω');
      return;
    }

    this.logger.log(`üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.intervalMinutes} –º–∏–Ω)`);

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    this.performCheck();

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const intervalMs = this.intervalMinutes * 60 * 1000;
    this.intervalId = setInterval(() => {
      this.performCheck();
    }, intervalMs);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.on('SIGINT', () => this.stop());
    process.on('SIGTERM', () => this.stop());
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      this.logger.log('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async performCheck() {
    this.checkCount++;
    this.lastCheckTime = new Date();

    try {
      const results = {
        timestamp: this.lastCheckTime,
        checkNumber: this.checkCount,
        exists: false,
        accessible: false,
        sizeOk: false,
        modifiedRecently: false,
        errors: []
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      if (!fs.existsSync(this.dbPath)) {
        results.errors.push('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        this.logWarning('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        return results;
      }
      results.exists = true;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
      try {
        fs.accessSync(this.dbPath, fs.constants.R_OK | fs.constants.W_OK);
        results.accessible = true;
      } catch (error) {
        results.errors.push('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –ë–î');
        this.logError('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ë–î!');
        return results;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const stats = fs.statSync(this.dbPath);
      const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
      if (stats.size > 100) {
        results.sizeOk = true;
      } else {
        results.errors.push('–ë–î —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞)');
        this.logWarning(`‚ö†Ô∏è  –ë–î —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: ${sizeInMB} MB`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const lastModified = new Date(stats.mtime);
      const now = new Date();
      const daysSinceModified = Math.floor((now - lastModified) / (1000 * 60 * 60 * 24));

      if (daysSinceModified <= 30) {
        results.modifiedRecently = true;
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      if (results.errors.length === 0) {
        this.logger.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î #${this.checkCount} –ø—Ä–æ–π–¥–µ–Ω–∞ (—Ä–∞–∑–º–µ—Ä: ${sizeInMB} MB)`);
      }

      return results;

    } catch (error) {
      this.logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: ${error.message}`);
      return {
        timestamp: this.lastCheckTime,
        checkNumber: this.checkCount,
        errors: [error.message]
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  getStatus() {
    return {
      enabled: this.enabled,
      running: this.intervalId !== null,
      intervalMinutes: this.intervalMinutes,
      lastCheckTime: this.lastCheckTime,
      checkCount: this.checkCount,
      nextCheckIn: this.getNextCheckTime()
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  getNextCheckTime() {
    if (!this.lastCheckTime || !this.intervalId) {
      return null;
    }

    const nextCheck = new Date(this.lastCheckTime.getTime() + this.intervalMinutes * 60 * 1000);
    const now = new Date();
    const minutesUntilNext = Math.ceil((nextCheck - now) / (1000 * 60));

    return {
      nextCheckAt: nextCheck,
      minutesUntilNext: minutesUntilNext > 0 ? minutesUntilNext : 0
    };
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   */
  logWarning(message) {
    if (this.logger.warn) {
      this.logger.warn(message);
    } else {
      this.logger.log(`WARNING: ${message}`);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
   */
  logError(message) {
    if (this.logger.error) {
      this.logger.error(message);
    } else {
      this.logger.log(`ERROR: ${message}`);
    }
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async checkNow() {
    this.logger.log('üîç –ó–∞–ø—É—Å–∫ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î...');
    return await this.performCheck();
  }
}

module.exports = DatabaseMonitor;

